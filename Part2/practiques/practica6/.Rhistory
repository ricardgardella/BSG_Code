result <- substr(row,1,1) != substr(row,2,2)
for (i in 2:length(row))
{
append(result,substr(row[i],1,1) != substr(row[i],2,2))
}
return(sum(result))
}
num <- apply(Y, 1, heterozygote_count)
uncertain <- num[num > 1 ]
cat("Individuals with ambiguous or uncertain haplotopic constitution: ", names(uncertain))
heterozygote_count <- function(row){
row <- row[!is.na(row)]
result <- substr(row,1,1) != substr(row,2,2)
for (i in 2:length(row))
{
append(result,substr(row[i],1,1) != substr(row[i],2,2))
}
return(sum(result))
}
num <- apply(Y, 1, heterozygote_count)
uncertain <- num[num > 1 ]
cat("Individuals with ambiguous or uncertain haplotopic constitution: ", names(uncertain))
ex5data <- Y[num > 1]
haploData <- cbind(substr(Y[,1],1,1),substr(Y[,1],2,2))
for(i in 2:ncol(Y)) {
haploData <- cbind(haploData,substr(Y[,i],1,1),substr(Y[,i],2,2))
}
snpnames <- paste("snp", 1:28,sep="")
h = haplo.em(haploData, control=haplo.em.control(min.posterior=1e-3))
print("The most common haplotype is")
h$haplotype[nrow(h$haplotype),]
heterozygote_count <- function(row){
row <- row[!is.na(row)]
result <- substr(row,1,1) != substr(row,2,2)
for (i in 2:length(row))
{
append(result,substr(row[i],1,1) != substr(row[i],2,2))
}
return(sum(result))
}
num <- apply(Y, 1, heterozygote_count)
uncertain <- num[num > 1 ]
cat("Individuals with ambiguous or uncertain haplotopic constitution: ", names(uncertain))
ex5data <- Y[num > 1]
haploData <- cbind(substr(Y[,1],1,1),substr(Y[,1],2,2))
for(i in 2:ncol(Y)) {
haploData <- cbind(haploData,substr(Y[,i],1,1),substr(Y[,i],2,2))
}
snpnames <- paste("snp", 1:28,sep="")
h = haplo.em(haploData, control=haplo.em.control(min.posterior=1e-3))
print("The most common haplotype is")
h$haplotype[nrow(h$haplotype),]
haploData <- cbind(substr(Y[,1],1,1),substr(Y[,1],2,2))
for(i in 2:ncol(Y)) {
haploData <- cbind(haploData,substr(Y[,i],1,1),substr(Y[,i],2,2))
}
snpnames <- paste("snp", 1:28,sep="")
h = haplo.em(haploData, control=haplo.em.control(min.posterior=1e-3))
cat("We have ",nrow(h$haplotype)," haplotypes")
for(i in 1:nrow(h$haplotype)){
print("")
cat('The haplotype:')
print(h$haplotype[i,])
cat('have a probability of :' ,h$hap.prob[i])
}
print("The most common haplotype is")
h$haplotype[nrow(h$haplotype),]
knitr::opts_chunk$set(echo = TRUE)
library(HardyWeinberg)
library(genetics)
library(ggplot2)
library(gridExtra)
library(LDheatmap)
library(haplo.stats)
set.seed(123)
load('/Users/ricardgardellagarcia/Documents/Master Data science/BSG/Part2/practiques/practica4/MB.rda')
cat('We have',ncol(Y),'individuals in the database.')
cat('And we have',nrow(Y),"SNP's in the database.")
cat("The percentatge of data missign is ",(length(Y[is.na(Y)])/(ncol(Y)*nrow(Y)))*100,"%")
cat("Assuming that all SNPs are bi-allelic we will have ", 2*ncol(Y),"haplotypes")
haploData <- cbind(substr(Y[,1],1,1),substr(Y[,1],2,2))
for(i in 2:ncol(Y)) {
haploData <- cbind(haploData,substr(Y[,i],1,1),substr(Y[,i],2,2))
}
snpnames <- paste("snp", 1:28,sep="")
h = haplo.em(haploData, control=haplo.em.control(min.posterior=1e-3))
cat("We have ",nrow(h$haplotype)," haplotypes")
for(i in 1:nrow(h$haplotype)){
print("")
cat('The haplotype:')
print(h$haplotype[i,])
cat('have a probability of :' ,h$hap.prob[i])
}
print("The most common haplotype is")
h$haplotype[nrow(h$haplotype),]
haploData <- cbind(substr(Y[,1],1,1),substr(Y[,1],2,2))
for(i in 2:ncol(Y)) {
haploData <- cbind(haploData,substr(Y[,i],1,1),substr(Y[,i],2,2))
}
snpnames <- paste("snp", 1:28,sep="")
h = haplo.em(haploData, control=haplo.em.control(min.posterior=1e-3))
cat("We have ",nrow(h$haplotype)," haplotypes")
for(i in 1:nrow(h$haplotype)){
print("")
cat('The haplotype:')
print(h$haplotype[i,])
cat('have a probability of :' ,h$hap.prob[i])
}
print("The most common haplotype is")
h$haplotype[nrow(h$haplotype),]
h$haplotype
h$hap.prob
help("haplo.binomial")
help("haplo.stats")
help("haplo")
??haplo
help("haplo.em")
Y[1,1]
Y[2,2]
View(Y)
h$hap.prob.noLD
h$haplotype
h$nreps
h$post
h$nreps
h$nreps
h$post
h$nreps
h$post[22:25]
h$nreps
h$post[22:24]
h$hap1code
h$hap2code
haplotype
h$haplotype
h$nreps
h$post[22:24]
h$hap1code[22]
h$hap1code[22:24]
h$haplotype
h$haplotype[4,6,1]
h$haplotype[4,6,2]
h$haplotype
h$nreps
h$post[22:24]
h$hap1code[22:24]
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
len(code)
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
length(code)
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code
for(i in 1:length(code)){
h$haplotype[code[i]]
}
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code
for(i in 1:length(code)){
print(h$haplotype[code[i]])
}
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code
for(i in 1:length(code)){
print(h$haplotype[code[,i]])
}
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code
for(i in 1:length(code)){
print(h$haplotype[code[1,i]])
}
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code
for(i in 1:length(code)){
print(h$haplotype[,code[i]])
}
h$haplotype
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code
for(i in 1:length(code)){
print(h$haplotype[code[i],])
}
code2 = h$hap2code[22:24]
code
code2
h$haplotype
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code2 = h$hap2code[22:24]
code
code2
h$haplotype[code[3],]
h$haplotype[code2[3],]
h$nreps
h$post[22:24]
code = h$hap1code[22:24]
code2 = h$hap2code[22:24]
code
code2
h$haplotype[code[3],]
h$haplotype[code2[3],]
knitr::opts_chunk$set(echo = TRUE)
library(HardyWeinberg)
library(genetics)
library(ggplot2)
library(gridExtra)
library(LDheatmap)
library(haplo.stats)
set.seed(123)
haploData <- cbind(substr(Y[,1],1,1),substr(Y[,1],2,2))
for(i in 2:ncol(Y)) {
haploData <- cbind(haploData,substr(Y[,i],1,1),substr(Y[,i],2,2))
}
snpnames <- paste("snp", 1:28,sep="")
h = haplo.em(haploData, control=haplo.em.control(min.posterior=1e-3))
cat("We have ",nrow(h$haplotype)," haplotypes")
for(i in 1:nrow(h$haplotype)){
print("")
cat('The haplotype:')
print(h$haplotype[i,])
cat('have a probability of :' ,h$hap.prob[i])
}
knitr::opts_chunk$set(echo = TRUE)
library(HardyWeinberg)
library(genetics)
library(ggplot2)
library(gridExtra)
library(LDheatmap)
library(haplo.stats)
set.seed(123)
Y.dist = dist(Y)
Y.dist = as.matrix(Y.dist)
mds.out <- cmdscale(Y.dist,k=nrow(Y)-1,eig=TRUE)
mds.out <- cmdscale(Y.dist,k=nrow(Y)-1,eig=TRUE)
Y.dist = dist(Y)
Y.dist = dist(Y)
a = dist(Y)
load('/Users/ricardgardellagarcia/Documents/Master Data science/BSG/Part2/practiques/practica5/SNPChr20.rda')
Y.dist = dist(Y)
Y.dist = as.matrix(Y.dist)
mds.out <- cmdscale(Y.dist,k=nrow(Y)-1,eig=TRUE)
X <- mds.out$points[,1:2]
plot(X[,2],X[,1],type="n", xlab="", ylab="", main="Exercise 3",asp=1)
plot(X[,1],X[,2],type="n", xlab="", ylab="", main="Exercise 3",asp=1)
View(Y.dist)
plot(X[,1],X[,2], xlab="", ylab="", main="Exercise 3",asp=1)
plot(X[,2],X[,1], xlab="", ylab="", main="Exercise 3",asp=1)
mds.out$eig
mds.out$eig[1:10]
gof <- cmdscale(Y.dist, k=2, eig=TRUE)
gof <- gof$GOF
print(round(gof,digits=3))
x.1 <- Y.dist[lower.tri(Y.dist)]
x.2 <- X.dist[lower.tri(X.dist)]
plot(Dobs.vec, Dest.vec, xlab="Observed", ylab="fitted")
x.2 <- X.dist[lower.tri(X.dist)]
X.dist = as.matrix(dist(X))
x.1 <- Y.dist[lower.tri(Y.dist)]
x.2 <- X.dist[lower.tri(X.dist)]
plot(x.1, x.2, xlab="Observed", ylab="fitted")
u <- read.table('rs394221.dat')
setwd("~/Documents/Master Data science/BSG/Part2/practiques/practica6")
u <- read.table('rs394221.dat')
View(u)
knitr::opts_chunk$set(echo = TRUE)
library(HardyWeinberg)
library(genetics)
library(ggplot2)
library(gridExtra)
library(LDheatmap)
library(haplo.stats)
set.seed(123)
setwd("~/Documents/Master Data science/BSG/Part2/practiques/practica6")
u <- read.table('rs394221.dat')
u[,1]
u[,2]
Cases = c(0,0,0)
Controls = c(0,0,0)
u[,1]
u[,1]
u[,2]
Cases
Cases[1]
constructtable <-function(x){
if(x[,2] == "case")
{
if(x[,1]=="MM")Cases[1] = Cases[1]+1
if(x[,1]=="Mm")Cases[2] = Cases[2]+1
if(x[,1]=="mm")Cases[3] = Cases[3]+1
}
else
{
if(x[,1]=="MM")Controls[1] = Controls[1]+1
if(x[,1]=="Mm")Controls[2] = Controls[2]+1
if(x[,1]=="mm")Controls[3] = Controls[3]+1
}
}
apply(u,1,constructtable)
apply(u,1,constructtable)
```{r table}
constructtable <-function(x){
if(x[2] == "case")
{
if(x[,1]=="MM")Cases[1] = Cases[1]+1
if(x[,1]=="Mm")Cases[2] = Cases[2]+1
if(x[,1]=="mm")Cases[3] = Cases[3]+1
}
else
{
if(x[,1]=="MM")Controls[1] = Controls[1]+1
if(x[,1]=="Mm")Controls[2] = Controls[2]+1
if(x[,1]=="mm")Controls[3] = Controls[3]+1
}
}
apply(u,1,constructtable)
```{r table}
```{r table}
```{r table}
constructtable <-function(x){
if(x[2] == "case")
{
if(x[1]=="MM")Cases[1] = Cases[1]+1
if(x[1]=="Mm")Cases[2] = Cases[2]+1
if(x[1]=="mm")Cases[3] = Cases[3]+1
}
else
{
if(x[1]=="MM")Controls[1] = Controls[1]+1
if(x[1]=="Mm")Controls[2] = Controls[2]+1
if(x[1]=="mm")Controls[3] = Controls[3]+1
}
}
constructtable <-function(x){
if(x[2] == "case")
{
if(x[1]=="MM")Cases[1] = Cases[1]+1
if(x[1]=="Mm")Cases[2] = Cases[2]+1
if(x[1]=="mm")Cases[3] = Cases[3]+1
}
else
{
if(x[1]=="MM")Controls[1] = Controls[1]+1
if(x[1]=="Mm")Controls[2] = Controls[2]+1
if(x[1]=="mm")Controls[3] = Controls[3]+1
}
}
apply(u,1,constructtable)
for(1 in 10)
for(1 in 10):
cat("The same size is ",nrow(u))
Cases = c(0,0,0)
Controls = c(0,0,0)
#Here we create the table:
for(i in 1:nrow(u)){
if(u[i,2] == "case")
{
if(u[i,1]=="MM")Cases[1] = Cases[1]+1
if(u[i,1]=="Mm")Cases[2] = Cases[2]+1
if(u[i,1]=="mm")Cases[3] = Cases[3]+1
}
else
{
if(u[i,1]=="MM")Controls[1] = Controls[1]+1
if(u[i,1]=="Mm")Controls[2] = Controls[2]+1
if(u[i,1]=="mm")Controls[3] = Controls[3]+1
}
}
X = rbind(Cases,Controls)
rownames(X) = c("Cases","Controls")
colnames(X) = c("MM","Mm","mm")
X
total.genotype.counts = colSums(X)
total.genotype.counts
risk = Cases/total.genotype.counts
risk
plot(c(0,1,2),risk,ylim=c(0,1),type="b",xlab="Genotype",ylab="Risk") #plot of the risk
lm1 = lm(x~y)
```{r}
cas = rep(c(0,1,2),Cases)
con = rep(c(0,1,2),Controls)
lm1 = lm(x~y)
x = c(rep(1,sum(Cases)),rep(0,sum(Controls)))
y = c(cas,con)
lm1 = lm(x~y)
summary(lm1)
abline(coefficients(lm1),lty ="dotted")
plot(c(0,1,2),risk,ylim=c(0,1),type="b",xlab="Genotype",ylab="Risk") #plot of the risk
lm1 = lm(x~y)
summary(lm1)
abline(coefficients(lm1),lty ="dotted")
abline(coefficients(lm1),lty ="dotted")
plot(c(0,1,2),risk,ylim=c(0,1),type="b",xlab="Genotype",ylab="Risk") #plot of the risk
total.genotype.counts = colSums(X)
total.genotype.counts
risk = Cases/total.genotype.counts
risk
plot(c(0,1,2),risk,ylim=c(0,1),type="b",xlab="Genotype",ylab="Risk") #plot of the risk
plot(c(2,1,0),risk,ylim=c(0,1),type="b",xlab="Genotype",ylab="Risk") #plot of the risk
X[,1]
X[1,]
cat("The number of cases is" sum(X[1,]))
cat("The number of cases is:", sum(X[1,]))
cat("The number of controls is:", sum(X[2,]))
cat("The contigency table is this the following: ," X)
cat("The contigency table is this the following: ,", X)
X
res = chisq.test(X,correct = FALSE)
res$expected
or <- (X[1,1]*X[2,2])/(X[1,2]*X[2,1])
or
se.lor = sqrt(sum(1/X))#standard error logistic regression
se.lor
#Calculating confaince interval from odds
#low limit
ll.logodds = log(or) - qnorm(0.975)*se.lor#natural log, not log 10
#upper limit
ul.logodds = log(or) + qnorm(0.975)*se.lor
ll.logodds = exp(ll.logodds)
ul.logodds = exp(ul.logodds)
ll.logodds
ul.logodds
fisher.test(X)
fisher = fisher.test(X)
cat("The p-value of the test is: ",fisher$p.value)
fisher$alternative
fisher$method
fisher$alternative
res = chisq.test(X,correct = FALSE)
res$expected
res$statistic
res$p.value
cat("The p-value of the test is: ",fisher$p.value)
res$method
or <- (X[1,1]*X[2,2])/(X[1,2]*X[2,1])
or
se.lor = sqrt(sum(1/X))#standard error logistic regression
se.lor
#Calculating confaince interval from odds
#low limit
ll.logodds = log(or) - qnorm(0.975)*se.lor#natural log, not log 10
#upper limit
ul.logodds = log(or) + qnorm(0.975)*se.lor
ll.logodds = exp(ll.logodds)
ul.logodds = exp(ul.logodds)
ll.logodds
ul.logodds
res = chisq.test(X,correct = FALSE)
cat("The test statistic is : ", res$statistic)
fisher = fisher.test(X)
cat("The p-value of the test is: ",fisher$p.value)
#Calculating confaince interval from odds
#low limit
ll.logodds = log(or) - qnorm(0.975)*se.lor#natural log, not log 10
#upper limit
ul.logodds = log(or) + qnorm(0.975)*se.lor
ll.logodds = exp(ll.logodds)
ul.logodds = exp(ul.logodds)
ll.logodds
ul.logodds
cat("The p-value of the test is: ",fisher$p.value)
or <- (X[1,1]*X[2,2])/(X[1,2]*X[2,1])
or
res$expected
X
or <- (X[1,1]*X[2,2])/(X[1,2]*X[2,1])
or
Y <- cbind(2*X[,1]+X[,2],2*X[,3]+X[,2])
colnames(Y) <- c("1","2")
Y
Y <- cbind(2*X[,1]+X[,2],2*X[,3]+X[,2])
colnames(Y) <- c("1","2")
Y
res = chisq.test(Y,correct = FALSE)
cat("The test statistic is : ", res$statistic)
fisher = fisher.test(Y)
fisher
or <- (Y[1,1]*Y[2,2])/(Y[1,2]*Y[2,1])
or
or
#Calculating confaince interval from odds
#low limit
ll.logodds = log(or) - qnorm(0.975)*se.lor#natural log, not log 10
#upper limit
ul.logodds = log(or) + qnorm(0.975)*se.lor
ll.logodds = exp(ll.logodds)
ul.logodds
ll.logodds
ul.logodds
Y <- cbind(2*X[,1]+X[,2],2*X[,3]+X[,2])
colnames(Y) <- c("1","2")
Y
res = chisq.test(Y,correct = FALSE)
cat("The test statistic is : ", res$statistic)
res$observed
res$expected
res$p.value
